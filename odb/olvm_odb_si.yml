---

# Before running the playbook, configure default_vars.yml first to setup 
# default infrastrcuture variables
#

- name: Build single instance Oracle Database node, optionally with ASM disks for HA
  hosts: olvm
  vars:
    asm_disks_exists: [ ]
  vars_files:
    - default_vars.yml

  tasks:

    - name: Verify manditory VM name variable is defined
      ansible.builtin.fail:
        msg: "The playbook can't run when the vm_name variable is not defined."
      when: 
        - vm_name is not defined

    - name: Verify DHCP and HA are not combined
      ansible.builtin.fail:
        msg: "The playbook can't deploy a single instance Oracle DB with DHCP and HA enabled."
      when: 
        - vm_ha == true
        - vm_ip_address is not defined

    - name: Login to OLVM manager
      ovirt_auth:
        url: "{{ lookup('env', 'OVIRT_URL') }}"
        username: "{{ lookup('env', 'OVIRT_USERNAME') }}"
        password: "{{ lookup('env', 'OVIRT_PASSWORD') }}"
        ca_file: "{{ olvm_cafile | default('/etc/pki/ovirt-engine/ca.pem') }}"
        insecure: "{{ olvm_insecure | default(true) }}"
      tags:
        - always

    - block:
      - name: Deploy VM from template {{ olvm_template }} - DHCP
        ovirt_vm:
          auth: "{{ ovirt_auth }}"
          name: "{{ vm_name }}"
          template: "{{ olvm_template }}"
          description: "Cloned from {{ olvm_template }}"
          cluster: "{{ olvm_cluster }}"
          memory: "{{ vm_ram | default('4096MiB') }}"
          cpu_sockets: "{{ vm_cpu | default('2') }}"
          state: running
          cloud_init:
            host_name: "{{ vm_name }}"
            user_name: cloud-user
            root_password: "{{ vm_passwd }}"
            authorized_ssh_keys: "{{ vm_user_sshpubkey }}"
            timezone: "{{ vm_timezone | default('Etc/GMT')}}"
            custom_script: |
              runcmd:
                - cd /u01/racovm
                - ./GenerateNetconfig.sh -a
                - ./buildsingle.sh -s
                - touch /etc/cloud/cloud-init.disabled
          wait: true

      - meta: end_play
      when:
        - vm_ip_address is not defined

    - name: Do ASM disks status check and ask what to do when in use
      block:
      - name: Verify if ASM disk names are already in use
        ansible.builtin.include_tasks: "verify_asm.yml"
        with_items:
          - "{{ asm_disks }}"

      - name: Fail playbook as we detected ASM disks already in use
        ansible.builtin.fail:
          msg: |
            Playbook failed...ASM disk(s) with name(s) {{ asm_disks_exists }} already in use.
            Either remove the disks or change the ASM disk names before continuing to run this playbook.
        when:
          - asm_disks_exists | length != 0
      when: 
        - vm_ha == true

    - name: Create VM from template {{ olvm_template }}
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        name: "{{ vm_name }}"
        template: "{{ olvm_template }}"
        description: "Cloned from {{ olvm_template }}"
        cluster: "{{ olvm_cluster }}"
        memory: "{{ vm_ram | default('4096MiB') }}"
        cpu_sockets: "{{ vm_cpu | default('2') }}"
        high_availability: "{{ vm_ha | default('false') }}"
        state: present

    - name: Create temporary udev rules file
      ansible.builtin.copy:
        content: ""
        dest: /tmp/70-deploycluster.rules
        mode: "0644"

    - name: Preconfigure configuration files and ASM disks when HA is enabled
      block:
      - name: Create ASM disks for Oracle DB single instance, HA
        ansible.builtin.include_tasks: "build_asm.yml"
        with_items:
          - "{{ asm_disks }}"

      - name: "Attach ASM disks to {{ vm_name }} VM when HA is used"
        ovirt.ovirt.ovirt_disk:
          auth: "{{ ovirt_auth }}"
          name: "{{ item }}"
          vm_name: "{{ vm_name }}"
          interface: virtio_scsi
          state: attached
          activate: true
        with_items:
          - "{{ asm_disks }}"

      - name: Create ASM device string foreach ASM disk
        ansible.builtin.set_fact:
          asm_dev_strings: "/dev/deploycluster/{{ ' /dev/deploycluster/'.join(asm_disks) }}"

      - name: Create netconfig.ini file from template - with HA
        ansible.builtin.template:
          src: netconfig-siha-ini.j2
          dest: /tmp/netconfig.ini
      when: 
        - vm_ha == true

    - name: Create netconfig.ini file from template - without HA
      ansible.builtin.template:
        src: netconfig-si-ini.j2
        dest: /tmp/netconfig.ini
      when: 
        - vm_ha == false

    - name: Get content of remote netconfig.ini file
      slurp:
        src: /tmp/netconfig.ini
      register: netconfig_encoded

    - name: Get content of remote udev rules file
      slurp:
        src: /tmp/70-deploycluster.rules
      register: udev_rules_encoded

    - name: Launch VM {{ vm_name }} with cloud_init
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        name: "{{ vm_name }}"
        state: running
        cloud_init:
          host_name: "{{ vm_name + '.' + vm_dns_domain }}"
          user_name: cloud-user
          root_password: "{{ vm_passwd }}"
          authorized_ssh_keys: "{{ vm_user_sshpubkey }}"
          dns_servers: "{{ vm_dns }}"
          dns_search: "{{ vm_dns_domain }}"
          nic_name: "{{ vm_pubadap | default('eth0') }}"
          nic_boot_protocol: static
          nic_ip_address: "{{ vm_ip_address }}"
          nic_gateway: "{{ vm_gateway }}"
          nic_netmask: "{{ vm_netmask }}"
          timezone: "{{ vm_timezone }}"
          custom_script: |
            write_files:
              - content: !!binary |
                  {{ netconfig_encoded.content }}
                path: /root/netconfig.ini
                owner: oracle:oinstall
                permissions: "0644"
                encoding: b64decode
              - content: !!binary |
                  {{ udev_rules_encoded.content }}
                path: /root/70-deploycluster.rules
                owner: root:root
                permissions: "0644"
                encoding: b64decode
              - content: |
                  #!/bin/bash
                  if [ {{ vm_ha }} ]; then
                    cp /root/70-deploycluster.rules /etc/udev/rules.d/70-deploycluster.rules
                    /sbin/udevadm control -R
                    /sbin/udevadm trigger -s block -c add
                  fi
                  cp /root/netconfig.ini /u01/racovm/netconfig.ini
                  cd /u01/racovm
                  ./netconfig.sh -n1 -b
                path: /root/start_from_ansible.sh
                owner: root:root
                permissions: "0755"
            runcmd:
              - /root/start_from_ansible.sh
              - touch /etc/cloud/cloud-init.disabled
        wait: true


- name: Cleanup the environment
  hosts: olvm
  gather_facts: no
  vars_files:
    - default_vars.yml

  tasks:

    - name: Remove OLVM auth token
      ovirt_auth:
        ovirt_auth: "{{ ovirt_auth }}"
        state: absent

    - name: Remove artifacts
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      loop:
        - /tmp/70-deploycluster.rules
        - /tmp/netconfig.ini

    - name: Send message on how to monitor the Oracle DB build - DHCP
      debug:
        msg: "VM deployed, check progress with 'ssh -i ~/.ssh/<private-key> cloud-user@<dhcp_address> tail -f /u01/racovm/buildsingle.log'"
      when:
        - vm_ip_address is not defined

    - name: Send message on how to monitor the Oracle DB build - Static IP
      debug:
        msg: "VM deployed, check progress with 'ssh -i ~/.ssh/<private-key> cloud-user@{{ vm_name }} tail -f /u01/racovm/buildsingle.log'"
      when:
        - vm_ip_address is defined
